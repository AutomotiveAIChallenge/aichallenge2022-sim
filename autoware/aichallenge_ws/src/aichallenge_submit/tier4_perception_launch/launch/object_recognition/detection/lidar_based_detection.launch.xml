<?xml version="1.0"?>
<launch>
  <arg name="tier4_perception_launch_param_path"/>
  <arg name="input/pointcloud"/>
  <arg name="input/obstacle_segmentation/pointcloud" default="/perception/obstacle_segmentation/pointcloud"/>
  <arg name="output/objects" default="objects"/>
  <arg name="lidar_detection_model" default="centerpoint" description="options: `centerpoint`, `apollo`"/>
  <arg name="use_pointcloud_map" default="true" description="use pointcloud map in detection"/>
  <arg name="use_object_filter" default="true" description="use object filter"/>
  <arg name="use_pointcloud_container" default="false" description="use pointcloud container for detection preprocessor"/>
  <arg name="container_name" default="pointcloud_container"/>
  <arg name="use_validator" default="true" description="use obstacle_pointcloud based validator"/>
  <arg name="score_threshold" default="0.35"/>
  <arg name="centerpoint_model_name" default="centerpoint_tiny" description="options: `centerpoint` or `centerpoint_tiny`"/>
  <arg name="centerpoint_model_path" default="$(find-pkg-share lidar_centerpoint)/data"/>
  <arg name="centerpoint_model_param_path" default="$(find-pkg-share lidar_centerpoint)/config/$(var centerpoint_model_name).param.yaml"/>

  <!-- Pointcloud map filter -->
  <group>
    <include file="$(find-pkg-share tier4_perception_launch)/launch/object_recognition/detection/pointcloud_map_filter.launch.py" if="$(var use_pointcloud_map)">
      <arg name="tier4_perception_launch_param_path" value="$(var tier4_perception_launch_param_path)"/>
      <arg name="input_topic" value="$(var input/obstacle_segmentation/pointcloud)"/>
      <arg name="output_topic" value="pointcloud_map_filtered/pointcloud"/>
      <arg name="use_intra_process" value="true"/>
      <arg name="use_multithread" value="true"/>
      <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
      <arg name="container_name" value="$(var container_name)"/>
    </include>
  </group>

  <!-- Clustering -->
  <group>
    <push-ros-namespace namespace="clustering"/>
    <let name="clustering/input/pointcloud" value="/perception/object_recognition/detection/pointcloud_map_filtered/pointcloud" if="$(var use_pointcloud_map)"/>
    <let name="clustering/input/pointcloud" value="$(var input/obstacle_segmentation/pointcloud)" unless="$(var use_pointcloud_map)"/>
    <group>
      <include file="$(find-pkg-share euclidean_cluster)/launch/voxel_grid_based_euclidean_cluster.launch.xml">
        <arg name="input_pointcloud" value="$(var clustering/input/pointcloud)"/>
        <arg name="output_clusters" value="clusters"/>
        <arg name="use_pointcloud_map" value="false"/>
      </include>
    </group>

    <group>
      <include file="$(find-pkg-share shape_estimation)/launch/shape_estimation.launch.xml">
        <arg name="input/objects" value="clusters"/>
        <arg name="output/objects" value="objects_with_feature"/>
      </include>
    </group>

    <!-- convert DynamicObjectsWithFeatureArray to DynamicObjects -->
    <group>
      <include file="$(find-pkg-share detected_object_feature_remover)/launch/detected_object_feature_remover.launch.xml">
        <arg name="input" value="objects_with_feature"/>
        <arg name="output" value="objects"/>
      </include>
    </group>
  </group>

  <!-- DetectionByTracker -->
  <group>
    <push-ros-namespace namespace="detection_by_tracker"/>
    <include file="$(find-pkg-share detection_by_tracker)/launch/detection_by_tracker.launch.xml"/>
  </group>

  <!-- CenterPoint -->
  <group if="$(eval &quot;'$(var lidar_detection_model)'=='centerpoint'&quot;)">
    <push-ros-namespace namespace="centerpoint"/>
    <group>
      <include file="$(find-pkg-share lidar_centerpoint)/launch/lidar_centerpoint.launch.xml">
        <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
        <arg name="output/objects" value="objects"/>
        <arg name="score_threshold" value="$(var score_threshold)"/>
        <arg name="model_name" value="$(var centerpoint_model_name)"/>
        <arg name="model_path" value="$(var centerpoint_model_path)"/>
        <arg name="model_param_path" value="$(var centerpoint_model_param_path)"/>
      </include>
    </group>
  </group>

  <!-- Lidar Apollo Instance Segmentation -->
  <group if="$(eval &quot;'$(var lidar_detection_model)'=='apollo'&quot;)">
    <push-ros-namespace namespace="apollo"/>
    <group>
      <include file="$(find-pkg-share lidar_apollo_instance_segmentation)/launch/lidar_apollo_instance_segmentation.launch.xml">
        <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
        <arg name="output/objects" value="labeled_clusters"/>
      </include>
    </group>

    <group>
      <include file="$(find-pkg-share shape_estimation)/launch/shape_estimation.launch.xml">
        <arg name="input/objects" value="labeled_clusters"/>
        <arg name="output/objects" value="objects_with_feature"/>
        <arg name="use_vehicle_reference_yaw" value="true"/>
      </include>
    </group>

    <!-- convert DynamicObjectsWithFeatureArray to DynamicObjects -->
    <group>
      <include file="$(find-pkg-share detected_object_feature_remover)/launch/detected_object_feature_remover.launch.xml">
        <arg name="input" value="objects_with_feature"/>
        <arg name="output" value="objects"/>
      </include>
    </group>
  </group>

  <!-- Validator -->
  <group>
    <let name="validator/input/obstacle_pointcloud" value="/perception/object_recognition/detection/pointcloud_map_filtered/pointcloud" if="$(var use_pointcloud_map)"/>
    <let name="validator/input/obstacle_pointcloud" value="$(var input/obstacle_segmentation/pointcloud)" unless="$(var use_pointcloud_map)"/>
    <include file="$(find-pkg-share detected_object_validation)/launch/obstacle_pointcloud_based_validator.launch.xml" if="$(var use_validator)">
      <arg name="input/detected_objects" value="$(var lidar_detection_model)/objects"/>
      <arg name="input/obstacle_pointcloud" value="$(var validator/input/obstacle_pointcloud)"/>
      <arg name="output/objects" value="$(var lidar_detection_model)/validation/objects"/>
    </include>
  </group>

  <!-- Merger -->
  <group>
    <let name="merger/input/objects" value="$(var lidar_detection_model)/validation/objects" if="$(var use_validator)"/>
    <let name="merger/input/objects" value="$(var lidar_detection_model)/objects" unless="$(var use_validator)"/>
    <include file="$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml">
      <arg name="input/object0" value="$(var merger/input/objects)"/>
      <arg name="input/object1" value="clustering/objects"/>
      <arg name="output/object" value="temporary_merged_objects"/>
    </include>
  </group>

  <group>
    <let name="merger/output/objects" value="objects_before_filter" if="$(var use_object_filter)"/>
    <let name="merger/output/objects" value="$(var output/objects)" unless="$(var use_object_filter)"/>
    <include file="$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml">
      <arg name="input/object0" value="temporary_merged_objects"/>
      <arg name="input/object1" value="detection_by_tracker/objects"/>
      <arg name="output/object" value="$(var merger/output/objects)"/>
    </include>
  </group>

  <!-- Filter -->
  <group>
    <include file="$(find-pkg-share detected_object_validation)/launch/object_lanelet_filter.launch.xml" if="$(var use_object_filter)">
      <arg name="input/object" value="objects_before_filter"/>
      <arg name="output/object" value="$(var output/objects)"/>
      <arg name="filtering_range_param" value="$(var tier4_perception_launch_param_path)/object_recognition/detection/object_lanelet_filter.param.yaml"/>
    </include>
  </group>
</launch>
